package com.nirima.jenkins.repo.build;

import com.google.common.base.Function;
import com.google.common.base.Predicate;
import com.google.common.collect.Iterables;
import com.nirima.jenkins.repo.RepositoryContent;
import com.nirima.jenkins.repo.RepositoryDirectory;
import com.nirima.jenkins.repo.RepositoryElement;
import hudson.maven.reporters.MavenArtifact;
import org.apache.maven.artifact.repository.metadata.Metadata;
import org.apache.maven.artifact.repository.metadata.SnapshotVersion;
import org.apache.maven.artifact.repository.metadata.Versioning;
import org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Writer;
import sun.security.krb5.EncryptionKey;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringWriter;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;

/**
 * Created by IntelliJ IDEA.
 * User: magnayn
 * Date: 14/03/2011
 * Time: 20:09
 * To change this template use File | Settings | File Templates.
 */
public class MavenMetadataRepositoryItem implements RepositoryContent {
    DirectoryRepositoryItem directory;

     Metadata metadata;

    public InputStream getContent() throws Exception {
        return new ByteArrayInputStream(getData().getBytes());
    }

    public String getLastModified() {
        return "" + new Date().toLocaleString();
    }

    public Long getSize() {
        return (long)getData().length();  //To change body of implemented methods use File | Settings | File Templates.
    }

    public String getDescription() {
        return "Autogenerated Maven Metadata";  //To change body of implemented methods use File | Settings | File Templates.
    }

    public String getName() {
        return "maven-metadata.xml";  //To change body of implemented methods use File | Settings | File Templates.
    }

    public RepositoryDirectory getParent() {
        return directory;  //To change body of implemented methods use File | Settings | File Templates.
    }

    public void setParent(RepositoryDirectory parent) {
        this.directory = (DirectoryRepositoryItem)parent;
        if( this.directory == null )
            throw new IllegalArgumentException("Metadata can only be put in Repository directories.");
    }

    public String getPath() {
        return directory.getName() + "/" + getName();  //To change body of implemented methods use File | Settings | File Templates.
    }

    public String getData() {
        try
        {
            MetadataXpp3Writer xpp3Writer = new MetadataXpp3Writer();

            StringWriter sw = new StringWriter();
            xpp3Writer.write(sw, metadata);
            return sw.toString();
        }
        catch(Exception ex)
        {
            return "";
        }
    }



    public void addItemAsEntry(ArtifactRepositoryItem artifactRepositoryItem) {
        MavenArtifact item = artifactRepositoryItem.getArtifact();

        if( metadata == null )
        {
            metadata = new Metadata();
            metadata.setGroupId( item.groupId );
            metadata.setArtifactId(item.artifactId);
            metadata.setVersion( item.version );
        }
    }

    public void addItemAsVersion(ArtifactRepositoryItem artifactRepositoryItem) {
        MavenArtifact item = artifactRepositoryItem.getArtifact();

        if( metadata == null )
        {
            metadata = new Metadata();
            metadata.setVersioning( new Versioning() );
            metadata.setGroupId(item.groupId);
            metadata.setArtifactId(item.artifactId);
        }

        Versioning v = metadata.getVersioning();
        if( v.getVersions() == null || !v.getVersions().contains( item.version ) )
        {
            v.addVersion(item.version);
        }
    }
}
